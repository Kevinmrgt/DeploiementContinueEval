name: Deploy API

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: |
          cd api
          npm install
      
      - name: Run tests
        run: |
          cd api
          npm test
      
      - name: Create deployment artifact
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Creating deployment artifact for version $VERSION"
          mkdir -p deployment
          cp -r api deployment/
          cp -r ansible deployment/
          tar -czf api-deployment-$VERSION.tar.gz deployment
          echo "::set-output name=artifact_name::api-deployment-$VERSION.tar.gz"
      
      - name: Upload artifact
        if: success() && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: api-deployment-*.tar.gz
          retention-days: 5
          
      - name: Create release
        if: success() && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: api-deployment-*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANSIBLE_HOST_KEY_CHECKING: false
      
      - name: Notify deployment status
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: 'API deployment ${{ job.status }}'
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}